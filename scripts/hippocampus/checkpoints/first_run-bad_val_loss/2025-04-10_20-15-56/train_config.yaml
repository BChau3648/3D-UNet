model:
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 3
  # determines the order of operators in a single layer (crg - Conv3d+ReLU+GroupNorm)
  layer_order: crg
  # initial number of feature maps
  f_maps: 32
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: false
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
# loss function to be used during training
loss:
  name: DiceLoss
  # TODO: see if need to ignore background (either through ignore index or skip_last_target? idk which one yet)
  # a target value that is ignored and does not contribute to the input gradient
  ignore_index: null
  # skip the last channel in the target (i.e. when last channel contains data not relevant for the loss)
  skip_last_target: false
  normalization: softmax
optimizer:
  # initial learning rate
  learning_rate: 0.0002
  # weight decay
  weight_decay: 0.00001
# evaluation metric
eval_metric:
  # use Dice score metric
  name: DiceCoefficient
lr_scheduler:
  name: ReduceLROnPlateau
  # TODO: may need to tune factor and patience
  # make sure to use the 'min' mode cause lower AdaptedRandError is better
  mode: max
  factor: 0.5
  patience: 30
trainer:
  # model with lower eval score is considered better
  eval_score_higher_is_better: True
  # path to the checkpoint directory
  checkpoint_dir: '/radraid/blchau/3D-UNet/scripts/hippocampus/checkpoints'
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # path to the best_checkpoint.pytorch; to be used for fine-tuning the model with additional ground truth
  pre_trained: null
  # max number of epochs
  max_num_epochs: 100
# Configure training and validation loaders
loaders:
  # TODO: tune batch size, transforms, and slices
  # batch size
  batch_size: 16
  # how many subprocesses to use for data loading
  num_workers: 2
  # path to the raw data within the H5
  raw_internal_path: raw
  # path to  the label data within the H5
  label_internal_path: label
  # apply random shifting and scaling of the patches; value of 20 mean that patches may shrink/stretch by 20px in each dimension
  random_scale: 10
  # random scale execution probability; since random scale is quite slow for 3D data, we set it to 0.1
  random_scale_probability: 0.1
  # configuration of the train loader
  train:
    # path to the training datasets
    file_paths:
      - '/radraid/blchau/data/Task04_Hippocampus/preprocessed/train'

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [80, 64, 64]
      # train stride between patches
      stride_shape: [15, 25, 25]

    transformer:
      raw:
        - name: Standardize
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 45
          mode: reflect
        - name: ElasticDeformation
          spline_order: 3
        - name: GaussianBlur3D
          execution_probability: 0.5
        - name: AdditiveGaussianNoise
          execution_probability: 0.2
        - name: AdditivePoissonNoise
          execution_probability: 0.2
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 45
          mode: reflect
        - name: ElasticDeformation
          spline_order: 0
        - name: ToTensor
          expand_dims: false

  # configuration of the val loader
  val:
    # path to the val datasets
    file_paths:
      - '/radraid/blchau/data/Task04_Hippocampus/preprocessed/val'

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [80, 64, 64]
      # train stride between patches
      stride_shape: [80, 64, 64]

    # data augmentation
    transformer:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true
      label:
        - name: ToTensor
          expand_dims: false